{
    "identifier": "CVE-2017-3737",
    "summary": "OpenSSL 1.0.2 (starting from version 1.0.2b) introduced an \"error state\" mechanism. The intent was that if a fatal error occurred during a handshake then OpenSSL would move into the error state and would immediately fail if you attempted to continue the handshake. This works as designed for the explicit handshake functions (SSL_do_handshake(), SSL_accept() and SSL_connect()), however due to a bug it does not work correctly if SSL_read() or SSL_write() is called directly. In that scenario, if the handshake fails then a fatal error will be returned in the initial function call. If SSL_read()/SSL_write() is subsequently called by the application for the same SSL object then it will succeed and the data is passed without being decrypted/encrypted directly from the SSL/TLS record layer. In order to exploit this issue an application bug would have to be present that resulted in a call to SSL_read()/SSL_write() being issued after having already received a fatal error.",
    "references": [
        {
            "url": "https://github.com/openssl/openssl/commit/898fb884b706aaeb283de4812340bb0bde8476dc",
            "reference_id": ""
        }
    ],
    "vulnerable_packages": [
        "pkg:generic/openssl@1.0.2j",
        "pkg:generic/openssl@1.0.2b",
        "pkg:generic/openssl@1.0.2k",
        "pkg:generic/openssl@1.0.2f",
        "pkg:generic/openssl@1.0.2i",
        "pkg:generic/openssl@1.0.2g",
        "pkg:generic/openssl@1.0.2m",
        "pkg:generic/openssl@1.0.2d",
        "pkg:generic/openssl@1.0.2h",
        "pkg:generic/openssl@1.0.2l",
        "pkg:generic/openssl@1.0.2e",
        "pkg:generic/openssl@1.0.2c"
    ],
    "resolved_packages": [
        "pkg:generic/openssl@1.0.2n"
    ]
}