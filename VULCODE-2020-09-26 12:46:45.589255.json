{
    "identifier": "VULCODE-2020-09-26 12:46:45.589255",
    "summary": "Django-hashid-field v1.0.0 \r\n\r\nIf you already specified `salt` in fields, like `id = HashidField(salt=\"something\")` everywhere then you're already set, and can upgrade worry-free.\r\n\r\nIf you instead let the module fallback to `salt=settings.SECRET_KEY` (default behavior) then this upgrade will change all of your existing fields. It has been pointed out that it's possible to discover the salt used when encoding Hashids, and thus it is very dangerous to use settings.SECRET_KEY, as an attacker may be able to get your SECRET_KEY from your HashidFields.\r\n\r\nIf you absolutely MUST maintain backwards-compatibility and continue to support your old hashed values, then you can set `HASHID_FIELD_SALT = SECRET_KEY` in your settings. But this is *VERY DISCOURAGED*.",
    "references": [
        {
            "url": "",
            "reference_id": "pyup.io-38508"
        }
    ],
    "vulnerable_packages": [
        "pkg:pypi/django-hashid-field@0.1.6"
    ],
    "resolved_packages": [
        "pkg:pypi/django-hashid-field@2.0.0",
        "pkg:pypi/django-hashid-field@3.1.2",
        "pkg:pypi/django-hashid-field@1.2.1",
        "pkg:pypi/django-hashid-field@3.1.3",
        "pkg:pypi/django-hashid-field@2.1.1",
        "pkg:pypi/django-hashid-field@1.0.1",
        "pkg:pypi/django-hashid-field@2.1.5",
        "pkg:pypi/django-hashid-field@2.1.6",
        "pkg:pypi/django-hashid-field@1.2.2",
        "pkg:pypi/django-hashid-field@1.1.0",
        "pkg:pypi/django-hashid-field@3.0.0",
        "pkg:pypi/django-hashid-field@2.1.2",
        "pkg:pypi/django-hashid-field@2.1.4",
        "pkg:pypi/django-hashid-field@1.3.0",
        "pkg:pypi/django-hashid-field@2.0.1",
        "pkg:pypi/django-hashid-field@1.2.0",
        "pkg:pypi/django-hashid-field@1.0.0",
        "pkg:pypi/django-hashid-field@3.1.1",
        "pkg:pypi/django-hashid-field@2.1.0",
        "pkg:pypi/django-hashid-field@1.2.3"
    ]
}